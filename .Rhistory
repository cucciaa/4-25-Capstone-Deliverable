a <- plot_list[[1]]
for(p in plot_list) print(p)
cor_red   <- cor(filter(data, type == "red")   %>% select(-type))
cor_white <- cor(filter(data, type == "white") %>% select(-type))
par(mfrow = c(1,2))
corrplot(cor_red,   main = "Red Wine",   mar = c(0,0,1,0))
corrplot(cor_white, main = "White Wine", mar = c(0,0,1,0))
par(mfrow = c(1,1))
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
required_packages <- c("tidyverse", "broom", "corrplot")
to_install <- setdiff(required_packages, installed.packages()[, "Package"])
if (length(to_install) > 0) install.packages(to_install)
# Core libraries for data wrangling, plotting, and correlation analysis
library(tidyverse)
library(dplyr)       # ensure dplyr functions like bind_rows are available
library(broom)
library(corrplot)
# URLs for the datasets and other sources
red_url   <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
white_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
volatile_acidity_url <- "https://www.awri.com.au/wp-content/uploads/2018/03/s1982.pdf"
# Read data
red   <- read.csv(red_url, sep = ";")
white <- read.csv(white_url, sep = ";")
# Add type column
red$type   <- "red"
white$type <- "white"
# Combine using dplyr::bind_rows to ensure the function is found
data <- dplyr::bind_rows(red, white)
# Normality Check using Shapiro-Wilk Test
shapiro_red <- shapiro.test(filter(data, type == "red")$quality)
shapiro_white <- shapiro.test(filter(data, type == "white")$quality)
cat("Shapiro-Wilk Test for Red Wine:\n")
print(shapiro_red)
cat("\nShapiro-Wilk Test for White Wine:\n")
print(shapiro_white)
# Q-Q Plots for Normality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
qqnorm(filter(data, type == "red")$quality, main = "Q-Q Plot for Red Wine Quality")
qqline(filter(data, type == "red")$quality)
qqnorm(filter(data, type == "white")$quality, main = "Q-Q Plot for White Wine Quality")
qqline(filter(data, type == "white")$quality)
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Homogeneity of Variances using Levene’s Test
library(car) # For leveneTest
levene_test <- leveneTest(quality ~ type, data = data)
cat("\nLevene's Test for Equality of Variances:\n")
print(levene_test)
# Correlation Testing
cor_red_alc <- cor.test(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality)
cat("\nCorrelation Test Results for Alcohol vs Quality:\n")
list(
red = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
# Scatter Plots for Alcohol vs Quality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
plot(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality,
main = "Red Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "red")
plot(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality,
main = "White Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "white")
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Sample sizes
glue::glue("Red: {nrow(red)}, White: {nrow(white)}, Total: {nrow(data)}")
# Structure and summary
glimpse(data)
summary(data)
colSums(is.na(data))
ggplot(data, aes(x = factor(quality), fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Quality Score Distribution",
x = "Quality Score", y = "Count") +
theme_minimal()
features <- c("alcohol", "pH", "residual.sugar", "volatile.acidity")
plot_list <- lapply(features, function(feat) {
ggplot(data, aes(x = type, y = .data[[feat]])) +
geom_boxplot() +
labs(title = feat, y = feat) +
theme_minimal()
})
# Print all plots
a <- plot_list[[1]]
for(p in plot_list) print(p)
cor_red   <- cor(filter(data, type == "red")   %>% select(-type))
cor_white <- cor(filter(data, type == "white") %>% select(-type))
par(mfrow = c(1,2))
corrplot(cor_red,   main = "Red Wine",   mar = c(0,0,1,0))
corrplot(cor_white, main = "White Wine", mar = c(0,0,1,0))
par(mfrow = c(1,1))
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
## Non-Parametric Statistical Testing
### Wilcoxon Rank-Sum Test for Mean Quality
```{r wilcox-test-quality}
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
# Spearman correlation (non-parametric) by wine type
spearman_red   <- cor.test(filter(data, type == "red")$alcohol,
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
required_packages <- c("tidyverse", "broom", "corrplot")
to_install <- setdiff(required_packages, installed.packages()[, "Package"])
if (length(to_install) > 0) install.packages(to_install)
# Core libraries for data wrangling, plotting, and correlation analysis
library(tidyverse)
library(dplyr)       # ensure dplyr functions like bind_rows are available
library(broom)
library(corrplot)
# URLs for the datasets and other sources
red_url   <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
white_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
volatile_acidity_url <- "https://www.awri.com.au/wp-content/uploads/2018/03/s1982.pdf"
# Read data
red   <- read.csv(red_url, sep = ";")
white <- read.csv(white_url, sep = ";")
# Add type column
red$type   <- "red"
white$type <- "white"
# Combine using dplyr::bind_rows to ensure the function is found
data <- dplyr::bind_rows(red, white)
# Normality Check using Shapiro-Wilk Test
shapiro_red <- shapiro.test(filter(data, type == "red")$quality)
shapiro_white <- shapiro.test(filter(data, type == "white")$quality)
cat("Shapiro-Wilk Test for Red Wine:\n")
print(shapiro_red)
cat("\nShapiro-Wilk Test for White Wine:\n")
print(shapiro_white)
# Q-Q Plots for Normality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
qqnorm(filter(data, type == "red")$quality, main = "Q-Q Plot for Red Wine Quality")
qqline(filter(data, type == "red")$quality)
qqnorm(filter(data, type == "white")$quality, main = "Q-Q Plot for White Wine Quality")
qqline(filter(data, type == "white")$quality)
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Homogeneity of Variances using Levene’s Test
library(car) # For leveneTest
levene_test <- leveneTest(quality ~ type, data = data)
cat("\nLevene's Test for Equality of Variances:\n")
print(levene_test)
# Correlation Testing
cor_red_alc <- cor.test(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality)
cat("\nCorrelation Test Results for Alcohol vs Quality:\n")
list(
red = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
# Scatter Plots for Alcohol vs Quality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
plot(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality,
main = "Red Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "red")
plot(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality,
main = "White Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "white")
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Sample sizes
glue::glue("Red: {nrow(red)}, White: {nrow(white)}, Total: {nrow(data)}")
# Structure and summary
glimpse(data)
summary(data)
colSums(is.na(data))
ggplot(data, aes(x = factor(quality), fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Quality Score Distribution",
x = "Quality Score", y = "Count") +
theme_minimal()
features <- c("alcohol", "pH", "residual.sugar", "volatile.acidity")
plot_list <- lapply(features, function(feat) {
ggplot(data, aes(x = type, y = .data[[feat]])) +
geom_boxplot() +
labs(title = feat, y = feat) +
theme_minimal()
})
# Print all plots
a <- plot_list[[1]]
for(p in plot_list) print(p)
cor_red   <- cor(filter(data, type == "red")   %>% select(-type))
cor_white <- cor(filter(data, type == "white") %>% select(-type))
par(mfrow = c(1,2))
corrplot(cor_red,   main = "Red Wine",   mar = c(0,0,1,0))
corrplot(cor_white, main = "White Wine", mar = c(0,0,1,0))
par(mfrow = c(1,1))
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
# 2. Pearson correlation: Alcohol vs. Quality
pearson_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"])
pearson_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"])
list(
red   = broom::tidy(pearson_red),
white = broom::tidy(pearson_white)
)
# 3. Wilcoxon rank-sum test for ordinal quality
wilcox_res <- wilcox.test(quality ~ type,
data     = data,
exact    = FALSE,
conf.int = TRUE)
broom::tidy(wilcox_res)
# 4. Spearman’s rank correlation: Alcohol vs. Quality
spearman_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"],
method = "spearman")
spearman_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"],
method = "spearman")
list(
red   = broom::tidy(spearman_red),
white = broom::tidy(spearman_white)
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
required_packages <- c("tidyverse", "broom", "corrplot")
to_install <- setdiff(required_packages, installed.packages()[, "Package"])
if (length(to_install) > 0) install.packages(to_install)
# Core libraries for data wrangling, plotting, and correlation analysis
library(tidyverse)
library(dplyr)       # ensure dplyr functions like bind_rows are available
library(broom)
library(corrplot)
# URLs for the datasets and other sources
red_url   <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
white_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
volatile_acidity_url <- "https://www.awri.com.au/wp-content/uploads/2018/03/s1982.pdf"
# Read data
red   <- read.csv(red_url, sep = ";")
white <- read.csv(white_url, sep = ";")
# Add type column
red$type   <- "red"
white$type <- "white"
# Combine using dplyr::bind_rows to ensure the function is found
data <- dplyr::bind_rows(red, white)
# Normality Check using Shapiro-Wilk Test
shapiro_red <- shapiro.test(filter(data, type == "red")$quality)
shapiro_white <- shapiro.test(filter(data, type == "white")$quality)
cat("Shapiro-Wilk Test for Red Wine:\n")
print(shapiro_red)
cat("\nShapiro-Wilk Test for White Wine:\n")
print(shapiro_white)
# Q-Q Plots for Normality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
qqnorm(filter(data, type == "red")$quality, main = "Q-Q Plot for Red Wine Quality")
qqline(filter(data, type == "red")$quality)
qqnorm(filter(data, type == "white")$quality, main = "Q-Q Plot for White Wine Quality")
qqline(filter(data, type == "white")$quality)
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Homogeneity of Variances using Levene’s Test
library(car) # For leveneTest
levene_test <- leveneTest(quality ~ type, data = data)
cat("\nLevene's Test for Equality of Variances:\n")
print(levene_test)
# Correlation Testing
cor_red_alc <- cor.test(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality)
cat("\nCorrelation Test Results for Alcohol vs Quality:\n")
list(
red = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
# Scatter Plots for Alcohol vs Quality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
plot(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality,
main = "Red Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "red")
plot(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality,
main = "White Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "white")
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Sample sizes
glue::glue("Red: {nrow(red)}, White: {nrow(white)}, Total: {nrow(data)}")
# Structure and summary
glimpse(data)
summary(data)
colSums(is.na(data))
ggplot(data, aes(x = factor(quality), fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Quality Score Distribution",
x = "Quality Score", y = "Count") +
theme_minimal()
features <- c("alcohol", "pH", "residual.sugar", "volatile.acidity")
plot_list <- lapply(features, function(feat) {
ggplot(data, aes(x = type, y = .data[[feat]])) +
geom_boxplot() +
labs(title = feat, y = feat) +
theme_minimal()
})
# Print all plots
a <- plot_list[[1]]
for(p in plot_list) print(p)
cor_red   <- cor(filter(data, type == "red")   %>% select(-type))
cor_white <- cor(filter(data, type == "white") %>% select(-type))
par(mfrow = c(1,2))
corrplot(cor_red,   main = "Red Wine",   mar = c(0,0,1,0))
corrplot(cor_white, main = "White Wine", mar = c(0,0,1,0))
par(mfrow = c(1,1))
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
# 2. Pearson correlation: Alcohol vs. Quality
pearson_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"])
pearson_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"])
list(
red   = broom::tidy(pearson_red),
white = broom::tidy(pearson_white)
)
# 3. Wilcoxon rank-sum test for ordinal quality
wilcox_res <- wilcox.test(quality ~ type,
data     = data,
exact    = FALSE,
conf.int = TRUE)
broom::tidy(wilcox_res)
# 4. Spearman’s rank correlation: Alcohol vs. Quality
spearman_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"],
method = "spearman")
spearman_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"],
method = "spearman")
list(
red   = broom::tidy(spearman_red),
white = broom::tidy(spearman_white)
)
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7,
fig.height = 5
)
required_packages <- c("tidyverse", "broom", "corrplot")
to_install <- setdiff(required_packages, installed.packages()[, "Package"])
if (length(to_install) > 0) install.packages(to_install)
# Core libraries for data wrangling, plotting, and correlation analysis
library(tidyverse)
library(dplyr)       # ensure dplyr functions like bind_rows are available
library(broom)
library(corrplot)
# URLs for the datasets and other sources
red_url   <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
white_url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
volatile_acidity_url <- "https://www.awri.com.au/wp-content/uploads/2018/03/s1982.pdf"
# Read data
red   <- read.csv(red_url, sep = ";")
white <- read.csv(white_url, sep = ";")
# Add type column
red$type   <- "red"
white$type <- "white"
# Combine using dplyr::bind_rows to ensure the function is found
data <- dplyr::bind_rows(red, white)
# Normality Check using Shapiro-Wilk Test
shapiro_red <- shapiro.test(filter(data, type == "red")$quality)
shapiro_white <- shapiro.test(filter(data, type == "white")$quality)
cat("Shapiro-Wilk Test for Red Wine:\n")
print(shapiro_red)
cat("\nShapiro-Wilk Test for White Wine:\n")
print(shapiro_white)
# Q-Q Plots for Normality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
qqnorm(filter(data, type == "red")$quality, main = "Q-Q Plot for Red Wine Quality")
qqline(filter(data, type == "red")$quality)
qqnorm(filter(data, type == "white")$quality, main = "Q-Q Plot for White Wine Quality")
qqline(filter(data, type == "white")$quality)
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Homogeneity of Variances using Levene’s Test
library(car) # For leveneTest
levene_test <- leveneTest(quality ~ type, data = data)
cat("\nLevene's Test for Equality of Variances:\n")
print(levene_test)
# Correlation Testing
cor_red_alc <- cor.test(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality)
cat("\nCorrelation Test Results for Alcohol vs Quality:\n")
list(
red = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
# Scatter Plots for Alcohol vs Quality
par(mfrow = c(1, 2))  # Set up the plotting window to show two plots side by side
plot(filter(data, type == "red")$alcohol, filter(data, type == "red")$quality,
main = "Red Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "red")
plot(filter(data, type == "white")$alcohol, filter(data, type == "white")$quality,
main = "White Wine: Alcohol vs Quality",
xlab = "Alcohol", ylab = "Quality", pch = 19, col = "white")
par(mfrow = c(1, 1))  # Reset the plotting window to default
# Sample sizes
glue::glue("Red: {nrow(red)}, White: {nrow(white)}, Total: {nrow(data)}")
# Structure and summary
glimpse(data)
summary(data)
colSums(is.na(data))
ggplot(data, aes(x = factor(quality), fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Quality Score Distribution",
x = "Quality Score", y = "Count") +
theme_minimal()
features <- c("alcohol", "pH", "residual.sugar", "volatile.acidity")
plot_list <- lapply(features, function(feat) {
ggplot(data, aes(x = type, y = .data[[feat]])) +
geom_boxplot() +
labs(title = feat, y = feat) +
theme_minimal()
})
# Print all plots
a <- plot_list[[1]]
for(p in plot_list) print(p)
cor_red   <- cor(filter(data, type == "red")   %>% select(-type))
cor_white <- cor(filter(data, type == "white") %>% select(-type))
par(mfrow = c(1,2))
corrplot(cor_red,   main = "Red Wine",   mar = c(0,0,1,0))
corrplot(cor_white, main = "White Wine", mar = c(0,0,1,0))
par(mfrow = c(1,1))
ttest <- t.test(quality ~ type, data = data)
tidy(ttest)
# 2. Pearson correlation: Alcohol vs. Quality
pearson_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"])
pearson_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"])
list(
red   = broom::tidy(pearson_red),
white = broom::tidy(pearson_white)
)
# 3. Wilcoxon rank-sum test for ordinal quality
wilcox_res <- wilcox.test(quality ~ type,
data     = data,
exact    = FALSE,
conf.int = TRUE)
broom::tidy(wilcox_res)
# 4. Spearman’s rank correlation: Alcohol vs. Quality
spearman_red   <- cor.test(data[data$type=="red",   "alcohol"],
data[data$type=="red",   "quality"],
method = "spearman")
spearman_white <- cor.test(data[data$type=="white", "alcohol"],
data[data$type=="white", "quality"],
method = "spearman")
list(
red   = broom::tidy(spearman_red),
white = broom::tidy(spearman_white)
)
cor_red_alc   <- cor.test(filter(data, type == "red")$alcohol,
filter(data, type == "red")$quality)
cor_white_alc <- cor.test(filter(data, type == "white")$alcohol,
filter(data, type == "white")$quality)
list(
red   = tidy(cor_red_alc),
white = tidy(cor_white_alc)
)
